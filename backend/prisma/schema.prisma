generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tasks {
  task_id Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  status      Status   @default(Pending)
  due_date    DateTime?
  created_at  DateTime @default(now())

  orders orders[]
}

enum Status {
  Pending
  In_Progress
  Completed
}

model orderdetail {
  order_id   Int
  product_id Int
  quantity   Int
  unit_price Decimal  @db.Decimal(10, 2)
  orders     orders   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "orderdetail_ibfk_1")
  products   products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "orderdetail_ibfk_2")

  @@id([order_id, product_id])
  @@index([product_id], map: "product_id")
}

model orders {
  order_id     Int                  @id
  task_id  Int
  order_date   DateTime             @default(now()) @db.DateTime(0)
  order_status orders_order_status?
  total_amount Decimal              @db.Decimal(10, 2)
  orderdetail  orderdetail[]
  tasks        tasks                @relation(fields: [task_id], references: [task_id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_1")
  payments     payments[]

  @@index([task_id], map: "task_id")
}

model payments {
  payment_id     Int                      @id @default(autoincrement())
  order_id       Int
  payment_method String?                  @db.VarChar(50)
  payment_date   DateTime?                @db.DateTime(0)
  amount         Decimal                  @db.Decimal(10, 2)
  remark         String?                  @db.VarChar(255)
  payment_status payments_payment_status?
  orders         orders                   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_1")

  @@index([order_id], map: "order_id")
}

model products {
  product_id  Int           @id
  name        String        @db.VarChar(100)
  description String?       @db.Text
  price       Decimal       @db.Decimal(10, 2)
  category    String?       @db.VarChar(50)
  image_url   String?       @db.VarChar(255)
  orderdetail orderdetail[]
}

model users {
  UserName String  @unique(map: "Users_UNIQUE") @db.VarChar(100)
  UserID   Int     @id @default(autoincrement())
  Password String  @db.VarChar(100)
  Status   String? @db.VarChar(100)
  Role     String? @db.VarChar(100)
}

enum orders_order_status {
  processing
  completed
  cancelled
}

enum payments_payment_status {
  pending
  completed
  failed
}
